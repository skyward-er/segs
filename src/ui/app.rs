use super::{
    panes::{Pane, PaneBehavior},
    persistency::{LayoutManager, LayoutManagerWindow},
    shortcuts,
    utils::maximized_pane_ui,
    widget_gallery::WidgetGallery,
    widgets::reception_led::ReceptionLed,
};
use crate::{
    communication::{
        ConnectionError,
        ethernet::EthernetConfiguration,
        serial::{
            DEFAULT_BAUD_RATE, SerialConfiguration, find_first_stm32_port, list_all_usb_ports,
        },
    },
    error::ErrInstrument,
    mavlink::DEFAULT_ETHERNET_PORT,
    message_broker::{MessageBroker, MessageBundle},
    ui::panes::PaneKind,
};
use eframe::CreationContext;
use egui::{Align2, Button, Color32, ComboBox, Key, Modifiers, RichText, Sides, Vec2};
use egui_extras::{Size, StripBuilder};
use egui_tiles::{Behavior, Container, Linear, LinearDir, Tile, TileId, Tiles, Tree};
use serde::{Deserialize, Serialize};
use std::{
    fs,
    path::{Path, PathBuf},
    time::{Duration, Instant},
};
use tracing::{debug, error, trace, warn};

pub struct App {
    /// Persistent state of the app
    state: AppState,
    layout_manager: LayoutManager,
    behavior: AppBehavior,
    maximized_pane: Option<TileId>,
    // == Message handling ==
    message_broker: MessageBroker,
    message_bundle: MessageBundle,
    // == Windows ==
    widget_gallery: WidgetGallery,
    sources_window: SourceWindow,
    layout_manager_window: LayoutManagerWindow,
}

// An app must implement the `App` trait to define how the ui is built
impl eframe::App for App {
    // The update function is called each time the UI needs repainting!
    fn update(&mut self, ctx: &egui::Context, _frame: &mut eframe::Frame) {
        self.process_messages();

        let panes_tree = &mut self.state.panes_tree;

        // Get the id of the hovered pane, in order to apply actions to it
        let hovered_pane = panes_tree
            .tiles
            .iter()
            .find(|(_, tile)| matches!(tile, Tile::Pane(pane) if pane.contains_pointer()))
            .map(|(id, _)| *id);
        trace!("Hovered pane: {:?}", hovered_pane);

        // Capture any pane action generated by pane children
        let mut pane_action = self.behavior.action.take();
        trace!("Pane action: {:?}", pane_action);

        if let Some(hovered_tile) = hovered_pane {
            // Capture any pane action generated by keyboard shortcuts
            let key_action_pairs = [
                ((Modifiers::NONE, Key::V), PaneAction::SplitV),
                ((Modifiers::NONE, Key::H), PaneAction::SplitH),
                ((Modifiers::NONE, Key::C), PaneAction::Close),
                (
                    (Modifiers::NONE, Key::R),
                    PaneAction::ReplaceThroughGallery(Some(hovered_tile)),
                ),
                ((Modifiers::SHIFT, Key::Escape), PaneAction::Maximize),
                ((Modifiers::NONE, Key::Escape), PaneAction::Exit),
            ];
            pane_action = pane_action.or(shortcuts::map_to_action(ctx, &key_action_pairs[..]));
        }

        // If an action was triggered, we consume it
        if let Some(action) = pane_action.take() {
            match action {
                PaneAction::SplitH => {
                    if let Some(hovered_tile) = hovered_pane {
                        profiling::scope!("split_h");
                        if self.maximized_pane.is_none() {
                            debug!("Called SplitH on tile {:?}", hovered_tile);
                            let hovered_tile_pane = panes_tree
                                .tiles
                                .remove(hovered_tile)
                                .log_expect("Hovered tile not found");
                            let left_pane = panes_tree.tiles.insert_new(hovered_tile_pane);
                            let right_pane = panes_tree.tiles.insert_pane(Pane::default());
                            panes_tree.tiles.insert(
                                hovered_tile,
                                Tile::Container(Container::Linear(Linear::new_binary(
                                    LinearDir::Horizontal,
                                    [left_pane, right_pane],
                                    0.5,
                                ))),
                            );
                        }
                    }
                }
                PaneAction::SplitV => {
                    profiling::scope!("split_v");
                    if self.maximized_pane.is_none() {
                        if let Some(hovered_tile) = hovered_pane {
                            debug!("Called SplitV on tile {:?}", hovered_tile);
                            let hovered_tile_pane = panes_tree
                                .tiles
                                .remove(hovered_tile)
                                .log_expect("Hovered tile not found");
                            let replaced = panes_tree.tiles.insert_new(hovered_tile_pane);
                            let lower_pane = panes_tree.tiles.insert_pane(Pane::default());
                            panes_tree.tiles.insert(
                                hovered_tile,
                                Tile::Container(Container::Linear(Linear::new_binary(
                                    LinearDir::Vertical,
                                    [replaced, lower_pane],
                                    0.5,
                                ))),
                            );
                        }
                    }
                }
                PaneAction::Close => {
                    if let Some(hovered_tile) = hovered_pane {
                        debug!("Called Close on tile {:?}", hovered_tile);
                        // Ignore if the root pane is the only one
                        if panes_tree.tiles.len() != 1 && self.maximized_pane.is_none() {
                            panes_tree.remove_recursively(hovered_tile);
                        }
                    }
                }
                PaneAction::Replace(tile_id, new_pane) => {
                    debug!(
                        "Called Replace on tile {:?} with pane {:?}",
                        tile_id, new_pane
                    );
                    panes_tree.tiles.insert(tile_id, Tile::Pane(*new_pane));
                }
                PaneAction::ReplaceThroughGallery(Some(source_tile)) => {
                    self.widget_gallery.replace_tile(source_tile);
                }
                PaneAction::Maximize => {
                    // This is a toggle: if there is not currently a maximized pane,
                    // maximize the hovered pane, otherwize remove the maximized pane.
                    if self.maximized_pane.is_some() {
                        self.maximized_pane = None;
                    } else if let Some(hovered_tile) = hovered_pane {
                        let hovered_pane_is_default = panes_tree
                            .tiles
                            .get(hovered_tile)
                            .map(|hovered_pane| {
                                matches!(
                                    hovered_pane,
                                    Tile::Pane(Pane {
                                        pane: PaneKind::Default(_),
                                    })
                                )
                            })
                            .unwrap_or(false);
                        if !hovered_pane_is_default {
                            self.maximized_pane = Some(hovered_tile);
                        }
                    }
                }
                PaneAction::Exit => {
                    if self.maximized_pane.is_some() {
                        self.maximized_pane = None;
                    }
                }
                _ => panic!("Unable to handle action"),
            }
        }

        // TODO: maybe introduce a stats struct to store these values?
        let reception_led_active = self
            .message_broker
            .time_since_last_reception()
            .unwrap_or(Duration::MAX)
            < Duration::from_millis(100);
        let reception_frequency = self.message_broker.reception_frequency();

        // Show a panel at the bottom of the screen with few global controls
        egui::TopBottomPanel::bottom("bottom_control").show(ctx, |ui| {
            // Horizontal belt of controls
            Sides::new().show(
                ui,
                |ui| ui.add(ReceptionLed::new(reception_led_active, reception_frequency)),
                |ui| {
                    ui.horizontal(|ui| {
                        egui::global_theme_preference_switch(ui);

                        // Window for the sources
                        self.sources_window
                            .show_window(ui, &mut self.message_broker);

                        if ui
                            .add(Button::new("ðŸ”Œ").frame(false))
                            .on_hover_text("Open the Sources")
                            .clicked()
                        {
                            self.sources_window.visible = !self.sources_window.visible;
                        }
                        if ui
                            .add(Button::new("ðŸ’¾").frame(false))
                            .on_hover_text("Open the Layout Manager")
                            .clicked()
                        {
                            self.layout_manager_window
                                .toggle_open_state(&self.layout_manager);
                        }

                        // If a pane is maximized show a visual clue
                        if self.maximized_pane.is_some() {
                            ui.label("Pane Maximized!");
                        }
                    });
                },
            );
        });

        // A central panel covers the remainder of the screen, i.e. whatever area is left after adding other panels.
        egui::CentralPanel::default().show(ctx, |ui| {
            if let Some(maximized_pane) = self.maximized_pane {
                if let Some(Tile::Pane(pane)) = panes_tree.tiles.get_mut(maximized_pane) {
                    maximized_pane_ui(ui, maximized_pane, pane);
                } else {
                    panic!("Maximized pane not found in tree!");
                }
            } else {
                panes_tree.ui(&mut self.behavior, ui);
            }
        });

        self.layout_manager_window
            .show(ctx, &mut self.layout_manager, &mut self.state);
        if let Some(action) = self.widget_gallery.show(ctx) {
            debug!("Widget gallery returned action {action:?}");
            self.behavior.action = Some(action);
        }

        // Used for the profiler
        profiling::finish_frame!();

        // UNCOMMENT THIS TO ENABLE CONTINOUS MODE
        // ctx.request_repaint();
    }

    fn save(&mut self, storage: &mut dyn eframe::Storage) {
        self.layout_manager.save_current_layout(storage);
    }
}

impl App {
    pub fn new(app_name: &str, ctx: &CreationContext) -> Self {
        let mut layout_manager = if let Some(storage) = ctx.storage {
            LayoutManager::new(app_name, storage)
        } else {
            LayoutManager::default()
        };

        let mut state = AppState::default();

        // Load the selected layout if valid and existing
        if let Some(layout) = layout_manager.current_layout().cloned() {
            layout_manager
                .load_layout(layout, &mut state)
                .unwrap_or_else(|e| {
                    error!("Error loading layout: {}", e);
                });
        }

        Self {
            state,
            layout_manager,
            message_broker: MessageBroker::new(ctx.egui_ctx.clone()),
            widget_gallery: WidgetGallery::default(),
            behavior: AppBehavior::default(),
            maximized_pane: None,
            message_bundle: MessageBundle::default(),
            sources_window: SourceWindow::default(),
            layout_manager_window: LayoutManagerWindow::default(),
        }
    }

    /// Retrieves new messages from the message broker and dispatches them to the panes.
    #[profiling::function]
    fn process_messages(&mut self) {
        let start = Instant::now();

        self.message_broker
            .process_messages(&mut self.message_bundle);

        // Skip updating the panes if there are no messages
        let count = self.message_bundle.count();
        if count == 0 {
            return;
        }

        debug!(
            "Receiving {count} messages from message broker took {:?}",
            start.elapsed()
        );

        let start = Instant::now();
        for (_, tile) in self.state.panes_tree.tiles.iter_mut() {
            // Skip non-pane tiles
            let Tile::Pane(pane) = tile else { continue };
            // Skip panes that do not have a subscription
            let Some(sub_id) = pane.get_message_subscription() else {
                continue;
            };

            if pane.should_send_message_history() {
                pane.update(self.message_broker.get(sub_id));
            } else {
                pane.update(self.message_bundle.get(sub_id));
            }
        }

        debug!(
            "Panes message processing messages took {:?}",
            start.elapsed()
        );
        self.message_bundle.reset();
    }
}

#[derive(Serialize, Deserialize, Clone, PartialEq)]
pub struct AppState {
    pub panes_tree: Tree<Pane>,
}

impl Default for AppState {
    fn default() -> Self {
        let mut tiles = Tiles::default();
        let root = tiles.insert_pane(Pane::default());
        let panes_tree = egui_tiles::Tree::new("main_tree", root, tiles);

        Self { panes_tree }
    }
}

impl AppState {
    pub fn from_file(path: &PathBuf) -> anyhow::Result<Self> {
        fs::read_to_string(path)
            .and_then(|json| serde_json::from_str::<AppState>(&json).map_err(Into::into))
            .map_err(|e| anyhow::anyhow!("Error deserializing layout: {}", e))
    }

    pub fn to_file(&self, path: &Path) -> anyhow::Result<()> {
        // Check if the parent path exists, if not create it
        if let Some(parent) = path.parent() {
            if !parent.exists() {
                fs::create_dir_all(parent)
                    .map_err(|e| anyhow::anyhow!("Error creating directory: {}", e))?;
                debug!("Created directory {:?}", parent);
            }
        }

        let serialized_layout = serde_json::to_string_pretty(self)
            .map_err(|e| anyhow::anyhow!("Error serializing layout: {}", e))?;
        debug!("Serialized layout: {}", serialized_layout);
        fs::write(path, serialized_layout)
            .map_err(|e| anyhow::anyhow!("Error writing layout: {}", e))?;

        Ok(())
    }
}

#[derive(Debug)]
enum ConnectionConfig {
    Ethernet(EthernetConfiguration),
    Serial(Option<SerialConfiguration>),
}

impl ConnectionConfig {
    fn default_ethernet() -> Self {
        Self::Ethernet(EthernetConfiguration {
            port: DEFAULT_ETHERNET_PORT,
        })
    }

    fn default_serial() -> Self {
        let port_name = find_first_stm32_port()
            .map(|port| port.port_name)
            .or(list_all_usb_ports()
                .ok()
                .and_then(|ports| ports.first().map(|port| port.port_name.clone())));
        let Some(port_name) = port_name else {
            warn!("USER ERROR: No serial port found");
            return Self::Serial(None);
        };
        Self::Serial(Some(SerialConfiguration {
            port_name,
            baud_rate: DEFAULT_BAUD_RATE,
        }))
    }

    fn is_valid(&self) -> bool {
        match self {
            Self::Ethernet(_) => true,
            Self::Serial(Some(_)) => true,
            Self::Serial(None) => false,
        }
    }

    fn open_connection(&self, msg_broker: &mut MessageBroker) -> Result<(), ConnectionError> {
        match self {
            Self::Ethernet(config) => msg_broker.open_connection(config.clone()),
            Self::Serial(Some(config)) => msg_broker.open_connection(config.clone()),
            Self::Serial(None) => Err(ConnectionError::WrongConfiguration(
                "No serial port found".to_string(),
            )),
        }
    }
}

impl Default for ConnectionConfig {
    fn default() -> Self {
        Self::Ethernet(EthernetConfiguration {
            port: DEFAULT_ETHERNET_PORT,
        })
    }
}

impl PartialEq for ConnectionConfig {
    fn eq(&self, other: &Self) -> bool {
        matches!(self, Self::Ethernet(_)) && matches!(other, Self::Ethernet(_))
            || matches!(self, Self::Serial(_)) && matches!(other, Self::Serial(_))
    }
}

#[derive(Debug, Default)]
struct SourceWindow {
    visible: bool,
    connection_config: ConnectionConfig,
}

impl SourceWindow {
    #[profiling::function]
    fn show_window(&mut self, ui: &mut egui::Ui, message_broker: &mut MessageBroker) {
        let mut window_is_open = self.visible;
        let mut can_be_closed = false;
        egui::Window::new("Sources")
            .id(ui.id())
            .anchor(Align2::CENTER_CENTER, [0.0, 0.0])
            .max_width(200.0)
            .collapsible(false)
            .resizable(false)
            .open(&mut window_is_open)
            .show(ui.ctx(), |ui| {
                self.ui(ui, &mut can_be_closed, message_broker);
            });
        self.visible = window_is_open && !can_be_closed;
    }

    fn ui(
        &mut self,
        ui: &mut egui::Ui,
        can_be_closed: &mut bool,
        message_broker: &mut MessageBroker,
    ) {
        let SourceWindow {
            connection_config, ..
        } = self;
        ui.label("Select Source:");
        ui.horizontal_top(|ui| {
            ui.radio_value(
                connection_config,
                ConnectionConfig::default_ethernet(),
                "Ethernet",
            );
            ui.radio_value(
                connection_config,
                ConnectionConfig::default_serial(),
                "Serial",
            );
        });

        ui.separator();

        match connection_config {
            ConnectionConfig::Ethernet(EthernetConfiguration { port }) => {
                egui::Grid::new("grid")
                    .num_columns(2)
                    .spacing([10.0, 5.0])
                    .show(ui, |ui| {
                        ui.label("Ethernet Port:");
                        ui.add(egui::DragValue::new(port).range(0..=65535).speed(10));
                        ui.end_row();
                    });
            }
            ConnectionConfig::Serial(opt) => {
                egui::Grid::new("grid")
                    .num_columns(2)
                    .spacing([10.0, 5.0])
                    .show(ui, |ui| {
                        ui.label("Serial Port:");
                        match opt {
                            Some(SerialConfiguration {
                                port_name,
                                baud_rate,
                            }) => {
                                ComboBox::from_id_salt("serial_port")
                                    .selected_text(port_name.as_str())
                                    .show_ui(ui, |ui| {
                                        for available_port in list_all_usb_ports().log_unwrap() {
                                            ui.selectable_value(
                                                port_name,
                                                available_port.port_name.clone(),
                                                available_port.port_name,
                                            );
                                        }
                                    });

                                ui.label("Baud Rate:");
                                ui.add(
                                    egui::DragValue::new(baud_rate)
                                        .range(110..=256000)
                                        .speed(100),
                                );
                                ui.end_row();
                            }
                            None => {
                                // in case of a serial connection missing
                                warn!("USER ERROR: No serial port found");
                                ui.label(
                                    RichText::new("No port found")
                                        .color(Color32::RED)
                                        .underline()
                                        .strong(),
                                );
                            }
                        }

                        ui.end_row();
                    });
            }
        };

        ui.separator();

        ui.allocate_ui(Vec2::new(ui.available_width(), 20.0), |ui| {
            StripBuilder::new(ui)
                .sizes(Size::remainder(), 2) // top cell
                .horizontal(|mut strip| {
                    strip.cell(|ui| {
                        let btn1 = Button::new("Connect");
                        ui.add_enabled_ui(
                            !message_broker.is_connected() & connection_config.is_valid(),
                            |ui| {
                                if ui.add_sized(ui.available_size(), btn1).clicked() {
                                    if let Err(e) =
                                        connection_config.open_connection(message_broker)
                                    {
                                        error!("Failed to open connection: {:?}", e); // TODO: handle user erros
                                    }
                                    *can_be_closed = true;
                                }
                            },
                        );
                    });
                    strip.cell(|ui| {
                        let btn2 = Button::new("Disconnect");
                        ui.add_enabled_ui(message_broker.is_connected(), |ui| {
                            if ui.add_sized(ui.available_size(), btn2).clicked() {
                                message_broker.close_connection();
                            }
                        });
                    });
                });
        });
    }
}

/// Behavior for the tree of panes in the app
#[derive(Default)]
pub struct AppBehavior {
    pub action: Option<PaneAction>,
}

impl Behavior<Pane> for AppBehavior {
    fn pane_ui(
        &mut self,
        ui: &mut egui::Ui,
        tile_id: TileId,
        pane: &mut Pane,
    ) -> egui_tiles::UiResponse {
        let PaneResponse {
            action_called,
            drag_response,
        } = pane.ui(ui, tile_id);
        // Capture the action and store it to be consumed in the update function
        if let Some(action_called) = action_called {
            self.action = Some(action_called);
        }
        drag_response
    }

    fn tab_title_for_pane(&mut self, _pane: &Pane) -> egui::WidgetText {
        "Tab".into()
    }
}

#[derive(Clone, Debug)]
pub struct PaneResponse {
    pub action_called: Option<PaneAction>,
    pub drag_response: egui_tiles::UiResponse,
}

impl PaneResponse {
    pub fn set_action(&mut self, action: PaneAction) {
        self.action_called = Some(action);
    }

    pub fn set_drag_started(&mut self) {
        self.drag_response = egui_tiles::UiResponse::DragStarted;
    }
}

impl Default for PaneResponse {
    fn default() -> Self {
        Self {
            action_called: None,
            drag_response: egui_tiles::UiResponse::None,
        }
    }
}

#[derive(Clone, Debug)]
pub enum PaneAction {
    SplitH,
    SplitV,
    Close,
    Replace(TileId, Box<Pane>),
    ReplaceThroughGallery(Option<TileId>),
    Maximize,
    Exit,
}
